y
c(1.1,9 , 3.14)
z <- c(1.1,9 , 3.14)
?c
z
c(z,555,z)
z* 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0,10,100)
z* 2 + 1000
my
my_div
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times= 40)
req(c(0, 1, 2),times = 10)
rep(c(0, 1, 2),times = 10)
rep(c(0,1,2) , each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "gchaleunsinh")
my_name
paste(my_name, collapse = " ")
paste("Hello", "word!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
info()
NaN
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf =NA)
vect
names(vect)
vect2 <- c(11, 2 , NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
str(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data) <- cnames
my_data
swirl()
quit()
source('~/.active-rstudio-document')
setwd("D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1")
list.files()
data <- read.csv('./activity.csv')
names(data)
head(data)
data
head(data)
names(data)
str(data)
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
data$date <- as.Date(data$date, '%Y-%m=%d')
str(data)
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
str(data)
data
str(data)
hist(data)
?hist
hist(data$steps)
?hist
aggregate(steps ~ date, data, mean)
aggregate(steps ~ date, data, median)
aggregate(steps ~ date, data, median, na.rm = TRUE)
names(data)
aggregate(steps ~ date, data, mean, na.rm = TRUE)
names(data)
head(data)
aggregate(steps ~ date, data, sum, na.rm = TRUE)
subset(data, data$date == '2012-10-01')
subset(data, data$date == '2012-10-02')
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
steps_per_days
str(steps_per_days)
hist(steps_per_days$steps)
?hist
hist(steps_per_days$steps, breaks=10)
hist(steps_per_days$steps, breaks=20)
hist(steps_per_days$steps, breaks=8)
hist(steps_per_days$steps, breaks=5)
hist(steps_per_days$steps, breaks=8)
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
mean(steps_days)
?mean
str(steps_days)
mean(steps_days$steps)
median(steps_days$steps)
summary(steps_days)
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
head(data)
plot(data$interval, data$step, type='l')
dim(data)
aggregate(steps ~ interval, data, na.rm = TRUE, mean)
avg_steps_interv <- aggregate(steps ~ interval, data, na.rm = TRUE, mean)
head(avg_step_interv)
head(avg_steps_interv)
plot(interval, steps, type='l')
plot(interval, steps, ,avg_step_interv,type='l')
?plot
with(avg_steps_interv,plot(interval, steps,type='l'))
with(avg_steps_interv,plot(interval, steps,type='l'))
max(avg_step_interv)
max(avg_steps_interv)
max(avg_steps_interv$steps)
which(avg_steps_interv , max(avg_steps_interv$steps))
aggregate(avg_steps_interv , max)
with(avrg_step_interv, interval ~ steps , max))
with(avrg_step_interv, aggregate(interval ~ steps , max))
with(avrg_steps_interv, aggregate(interval ~ steps , max))
with(avg_steps_interv, aggregate(interval ~ steps , max))
with(avg_steps_interv, aggregate(steps~ interval) , max))
with(avg_steps_interv, aggregate(steps~ interval , max))
aggregate(steps~ interval , data=avg_steps_interv, max)
max(avg_steps_interv)
max(avg_steps_interv$steps)
avg_steps_interv[][206.1698]
which(avg_steps_interv$steps ==206.1698]
which(avg_steps_interv$steps ==206.1698)
which(avg_steps_interv$steps == 206.1698)
which(avg_steps_interv$steps %in% 206.1698)
avg_steps_interv[which(avg_steps_interv$steps)]
avg_steps_interv[which(max(avg_steps_interv$steps)]
str(avg_step_interv)
str(avg_steps_interv)
which.max( avg_steps_interv$steps)
max(avg_steps_interv$steps)
avg_steps_interv[104,]
avg_steps_interv[ max(avg_steps_interv$steps),]
avg_steps_interv[ which.max(avg_steps_interv$steps),]
?rnow
?nrow
?apply
apply(data,1, function(r) sum(is.na(r)))
t <- apply(data,1, function(r) sum(is.na(r)))
nrow(t)
rowSums(is.na(data))
t <- trowSums(is.na(data))
t <- trowSums(is.na(data))
t <- rowSums(is.na(data))
t
rowSums(is.na(data))
str(data)
sum(is.na(data))
is.na(data)
head(is.na(data))
sum(is.na(data))
avg_step_interv
avg_steps_interv
head(data)
avg_step_interv[interval== 25]
avg_step_interv[interval= 25]
avg_step_interv[avg_ste_interv$interval= 25]
avg_step_interv[avg_ste_interv$interval=- 25]
avg_step_interv[avg_ste_interv$interval== 25]
avg_steps_interv[avg_steps_interv$interval== 25]
avg_steps_interv[avg_steps_interv$interval == '25']
avg_steps_interv[avg_steps_interv$interval == "25"]
str(avg_steps_interv)
avg_steps_interv[avg_steps_interv$interval == "25"]
avg_steps_interv[avg_steps_interv$interval == "25",]
avg_steps_interv[avg_steps_interv$interval == "25"]
avg_steps_interv[,avg_steps_interv$interval == "25"]
avg_steps_interv[avg_steps_interv$interval == "25",]
avg_steps_interv[avg_steps_interv$interval == "25",]$steps
data_filled <- data
length(data_filled$interval)
avg_steps_interv[interval == "25",]$steps
data_filled$interv[2]
data_filled$interv[5]
data_filled$steps[i] <- the_steps
data_filled <- data
str(data_filled)
for ( i in 1:length(data_filled$interval)) {}
length(data_filled$interval)
is.na(data_filled[2])
is.na(data_filled[2,])
is.na(data_filled[2,])
if ( is.na(data_filled$steps[i,])) {
{}
]
avg_steps_interv[interval == "25",]$steps
avg_steps_interv[avg_steps_interv$interval == "25",]$steps
the_steps <- avg_steps_interv[avg_steps_interv$interval == data_filled$interv[i],]$steps
str(data_filled)
the_steps <- avg_steps_interv[avg_steps_interv$interval == data_filled$interv[i],]$steps
for ( i in 1:length(data_filled$interval)) {
if ( is.na(data_filled$steps[i,])) {
the_steps <- avg_steps_interv[avg_steps_interv$interval == data_filled$interv[i],]$steps
data_filled$steps[i] <- the_steps
}
}
for ( i in 1:length(data_filled$interval)) {
if ( is.na(data_filled$steps[i])) {
the_steps <- avg_steps_interv[avg_steps_interv$interval == data_filled$interv[i],]$steps
data_filled$steps[i] <- the_steps
}
}
for ( i in 1:length(data_filled$interval)) {
if ( is.na(data_filled$steps[i])) {
the_steps <- avg_steps_interv[avg_steps_interv$interval == data_filled$interv[i],]$steps
data_filled$steps[i] <- the_steps
}
}
str(data_filled)
head(avg_steps_interv)
head(data_filled)
avg_steps_interv$interval == data_filled$interv[i]
avg_steps_filled <- aggregate(steps ~ interval, data_filled, mean)
avg_steps_filled
with(avg_steps_filled, plot(interval, steps, type='l'))
steps_days_filled <- aggregate(steps ~ interval, data_filled, sum)
hist(steps_day_filled)
hist(steps_days_filled)
str(steps_days_filled)
str(steps_days_filled$steps)
hist(steps_days_filled$steps)
steps_days_filled <- aggregate(steps ~ date, data_filled, sum)
hist(steps_days_filled$steps)
hist(steps_days_filled$steps,bins=8)
hist(steps_days_filled$steps,breaks=8)
hist(steps_days_filled$steps,breaks=8)
# median
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
mean(steps_days_filled$steps)
median(steps_days_filled$steps)
median(steps_days$steps)
mean(steps_days$steps)
?weekdays
head(data_filled)
weekdays(2012-10-01)
weekdays(as.Date("2012-10-01"))
Sys.setlocale("LC_TIME","English")
weekdays(as.Date("2012-10-01"))
nrows(data_filled)
nrow(data_filled)
str(data_filled)
weekdays(data_filled$date[5])
weekdays(data_filled$date[10])
weekdays(data_filled$date[11])
weekdays(data_filled$date[12])
weekdays(data_filled$date[200])
weekdays(data_filled$date[1000])
for ( i in 1:nrow(data_filled)) {
theday <- weekdays(data_filled$date[i])
if ( theday == "Sunday" or theday == "Saturday") {
data_filled$week <- "weekend"
} else {
data_filled$week <- "weekday"
}
}
for ( i in 1:nrow(data_filled)) {
theday <- weekdays(data_filled$date[i])
if ( theday == "Sunday" or theday == "Saturday") {
data_filled$week <- c("weekend")
} else {
data_filled$week <- c("weekday")
}
}
for ( i in 1:nrow(data_filled)) {
theday <- weekdays(data_filled$date[i])
if ( "theday" == "Sunday" or "theday" == "Saturday") {
data_filled$week <- c("weekend")
} else {
data_filled$week <- c("weekday")
}
}
for ( i in 1:nrow(data_filled)) {
theday <- weekdays(data_filled$date[i])
#if ( "theday" == "Sunday" or "theday" == "Saturday") {
#    data_filled$week <- c("weekend")
#} else {
#    data_filled$week <- c("weekday")
#}
}
theday
for ( i in 1:nrow(data_filled)) {
theday <- weekdays(data_filled$date[i])
if ( identical(theday,"Sunday") or identical(theay,"Saturday") {
print ('OK')
#    data_filled$week <- c("weekend")
#} else {
#    data_filled$week <- c("weekday")
}
}
for ( i in 1:nrow(data_filled)) {
theday <- weekdays(data_filled$date[i])
if ( identical(theday,"Sunday") | identical(theay,"Saturday") {
print ('OK')
#    data_filled$week <- c("weekend")
#} else {
#    data_filled$week <- c("weekday")
}
}
for ( i in 1:nrow(data_filled)) {
theday <- weekdays(data_filled$date[i])
if ( identical(theday,"Sunday") | identical(theday,"Saturday") {
print ('OK')
#    data_filled$week <- c("weekend")
#} else {
#    data_filled$week <- c("weekday")
}
}
for ( i in 1:nrow(data_filled)) {
theday <- weekdays(data_filled$date[i])
if ( identical(theday,"Sunday") | identical(theday,"Saturday") {
print ('OK')
#    data_filled$week <- c("weekend")
#} else {
#    data_filled$week <- c("weekday")
}
}
for ( i in 1:nrow(data_filled)) {
theday <- weekdays(data_filled$date[i])
print (theday)
#if ( identical(theday,"Sunday") | identical(theday,"Saturday") {
#    data_filled$week <- c("weekend")
#} else {
#    data_filled$week <- c("weekday")
}
}
for ( i in 1:nrow(data_filled)) {
theday <- weekdays(data_filled$date[i])
print (theday)
#if ( identical(theday,"Sunday") | identical(theday,"Saturday") {
#    data_filled$week <- c("weekend")
#} else {
#    data_filled$week <- c("weekday")
#}
}
for ( i in 1:nrow(data_filled)) {
theday <- weekdays(data_filled$date[i])
#print (theday)
if ( identical(theday,"Sunday") | identical(theday,"Saturday") {
data_filled[i]$week <- c("weekend")
} else {
data_filled[i]$week <- c("weekday")
}
}
for ( i in 1:nrow(data_filled)) {
theday <- weekdays(data_filled$date[i])
#print (theday)
if ( identical(theday,"Sunday") | identical(theday,"Saturday") {
data_filled[i,"week"] <- "weekend"
} else {
data_filled[i,"week"] <- "weekday"
}
}
str(data_filled)
data_filled$week
head(data_filled$week)
for ( i in 1:nrow(data_filled)) {
theday <- weekdays(data_filled$date[i])
#print (theday)
if ( identical(theday,"Sunday") | identical(theday,"Saturday") {
data_filled[i,"week"] <- "weekend"
} else {
data_filled[i,"week"] <- "weekday"
}
}
data_filled$week[,week == 'weekend']
data_filled$week[,data_filled$week == 'weekend']
data_filled$week[data_filled$week == 'weekend']
data_filled$week
if ( theday %in% c("Saturday", "Sunday")) {
;
]
data_filled$week[1] <- "weekend"
str(data_filled)
theday <- weekdays(data_filled$data[i])
theday <- weekdays(data_filled$date[i])
if ( theday %in% c("Saturday", "Sunday")) {
]
if ( weekdays(data_filled$date[i]) %in% c("Saturday", "Sunday")) {
]
for ( i in 1:nrow(data_filled)) {
]
for ( i in 1:nrow(data_filled)) {
#theday <- weekdays(data_filled$date[i])
if ( weekdays(data_filled$date[i]) %in% c("Saturday", "Sunday")) {
data_filled$week[i] <- "weekend"
} else {
data_filled$week[i] <- "weekday"
}
}
]
for ( i in 1:nrow(data_filled) ) {
#for ( i in 1:nrow(data_filled) ) {
]
#    #theday <- weekdays(data_filled$date[i])
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
#        data_filled$week[i] <- "weekday"
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
data_filled$week
data_filled
weekdays(as.Date('2012-10-09'))
weekdays(as.Date('2012-10-07'))
weekdays(as.Date('2012-10-06'))
str(data_filled)
data_filled$week <- as.factor(data_filled$week)
str(data_filled)
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
library(lattice)
xyplot(steps ~ interval | weektype, data= data_filled, layout = c(1,2))
xyplot(steps ~ interval | weektype, data= data_filled, layout = c(1,2), type='l')
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
avg_steps <- aggregate(steps ~ interval, data_filled, na.rm = TRUE, mean)
library(lattice)
xyplot(steps ~ interval | weektype, data = avg_steps, type='l',layout = c(1,2))
str(avg_steps)
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
str(data_filled)
avg_steps
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
str(data_filled)
avg_steps <- aggregate(steps , by=list(interval,weektype), data = data_filled, mean)
?aggregate
avg_steps <- aggregate(data_filled$steps , by=list(data_filled$interval,data_filled$weektype), data = data_filled, mean)
avg_steps <- aggregate(data_filled$steps , by=list(data_filled$interval,data_filled$weektype), mean)
library(lattice)
xyplot(steps ~ interval | weektype, data = avg_steps, type='l',layout = c(1,2))
st(avg_steps)
str(avg_steps)
avg_steps <- aggregate(data_filled$steps , by=list(data_filled$interval,data_filled$weektype), mean)
library(lattice)
xyplot(steps ~ interval | weektype, data = avg_steps, type='l',layout = c(1,2))
library(lattice)
xyplot(steps ~ interval | weektype, data = avg_steps, type='l',layout = c(1,2)
]
colnames(avg_steps) = c('')
colnames(avg_steps) = c("interval", "weektype", "steps")
library(lattice)
xyplot(steps ~ interval | weektype, data = avg_steps, type='l',layout = c(1,2))
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
xyplot(steps ~ interval | weektype, data = avg_steps, type='l',layout = c(1,2))
xyplot(steps ~ interval | weektype, data = avg_steps, type='l',layout = c(1,2))
source('D:/MOOC/coursera - Reproducible Research/RepData_PeerAssessment1/PA.R')
xyplot(steps ~ interval | weektype, data = avg_steps, type='l',layout = c(1,2))
?transform
